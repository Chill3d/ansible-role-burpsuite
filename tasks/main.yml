---
# tasks file for ansible-role-burpsuite

- name: Install required packages
  apt:
    name: "{{ burpsuite_packages }}"
    state: present
  become: true

- name: Check if previously installed
  stat:
    path: "{{ burpsuite_dir }}/.install4j/i4jparams.conf"
  register: install4j_config_file

- block:
    - name: Read install4j config file
      slurp:
        src: "{{ burpsuite_dir }}/.install4j/i4jparams.conf"
      register: install4j_config_contents

    - name: Get current version
      set_fact:
        installed_version: "{{ install4j_config_contents.content | b64decode |
            regex_search('applicationVersion=\"[0-9.]+\"', multiline=True) |
            regex_replace('applicationVersion=\"([0-9.]+)\"', '\\1') }}"
  when: install4j_config_file.stat.exists

- name: Retrieve release data from portswigger.net
  set_fact:
    burp_release_data: "{{ lookup('url', 'https://portswigger.net/burp/releases/data?lastId=-1&pageSize=50') }}"

- name: Query version number for Burp Suite {{ burpsuite_product_type }} latest release
  set_fact:
    burpsuite_version: "{{ burp_release_data | json_query(\"ResultSet.Results[0].builds[?ProductId == '\" + burpsuite_product_type + \"' && ProductPlatform=='Linux'].Version | [0]\") }}"
  when: burpsuite_version == "latest"

- name: Query checksum for Burp Suite {{ burpsuite_product_type }} {{ burpsuite_version }}
  set_fact:
    burpsuite_installer_sha256_checksum: "{{ burp_release_data | json_query(\"ResultSet.Results[0].builds[?Version == '\" + burpsuite_version + \"' && ProductId == '\" + burpsuite_product_type + \"' && ProductPlatform=='Linux'][].Sha256Checksum | [0]\") }}"

- block:
    - name: Set installer script filename
      set_fact:
        burpsuite_installer_script: "burpsuite_{{ burpsuite_product_type }}_linux_v{{ burpsuite_version | regex_replace('\\.', '_') }}.sh"

    - name: Check Burp Suite installer file exists
      stat:
        path: "{{ burpsuite_installer_dir }}/{{ burpsuite_installer_script }}"
        checksum_algorithm: sha256
      register: installer_script

    # If installer isn't present
    - block:
        # If community edition, then download it
        - name: Download Burp Suite Community installer
          get_url:
            url: "{{ burpsuite_community_download_url }}"
            dest: "{{ burpsuite_installer_dir }}/{{ burpsuite_installer_script }}"
            checksum: "sha256:{{ burpsuite_installer_sha256_checksum }}"
            mode: "0440"
          when: burpsuite_product_type == 'community'

        # If professional edition, then halt with an error
        - name: Burp Suite Pro installer is not present
          fail:
            msg: '{{ burpsuite_installer_dir }}/{{ burpsuite_installer_script }} does not exist. Cannot proceed with installation.'
          when: burpsuite_product_type == 'pro'
      when: not installer_script.stat.exists

    # If installer script is present, assert that the checksum is correct
    - name: Assert that checksum is correct
      assert:
        that:
          - burpsuite_installer_sha256_checksum == installer_script.stat.checksum
        fail_msg: "Burp Suite installer checksum is invalid"
        success_msg: "Burp Suite installer checksum is valid"
      when: installer_script.stat.exists

    - name: Create response.varfile for unattended install
      template:
        src: burpsuite_response.varfile.j2
        dest: "{{ burpsuite_installer_dir }}/burpsuite_response.varfile"

    - name: Install Burp Suite
      command: "/bin/sh {{ burpsuite_installer_script }} -q -varfile burpsuite_response.varfile -overwrite"
      args:
        chdir: "{{ burpsuite_installer_dir }}"

    - name: Remove response.varfile
      file:
        path: "{{ burpsuite_installer_dir }}/burpsuite_response.varfile"
        state: absent
  when: installed_version is not defined or installed_version != burpsuite_version

- name: Perform extra tasks for Burp Suite installation
  include: extra_tasks.yml
  when: burpsuite_extras_enabled

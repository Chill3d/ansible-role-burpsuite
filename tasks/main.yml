---
# tasks file for ansible-role-burpsuite

- name: Install required packages
  apt:
    name: "{{ burpsuite_packages }}"
    state: present

- name: Remove Kali burpsuite package if installed
  apt:
    name: burpsuite
    state: absent

- name: Check if previously installed
  stat:
    path: "{{ burpsuite_dir }}/.install4j/i4jparams.conf"
  register: install4j_config_file

- name: Read install4j config file
  slurp:
    src: "{{ burpsuite_dir }}/.install4j/i4jparams.conf"
  register: install4j_config_contents
  when: install4j_config_file.stat.exists

- name: Get current version
  set_fact:
    installed_version: "{{ install4j_config_contents.content | b64decode |
        regex_search('applicationVersion=\"[0-9.]+\"', multiline=True) |
        regex_replace('applicationVersion=\"([0-9.]+)\"', '\\1') }}"
  when: install4j_config_file.stat.exists

- block:
    - name: Set facts for Burp Suite
      set_fact:
        burpsuite_installer_script: "burpsuite_{{ burpsuite_product_type }}_linux_v{{ burpsuite_version | regex_replace('\\.', '_')}}.sh"

    - name: Download Burp Suite Community
      get_url:
        url: "{{ burpsuite_community_download_url }}"
        dest: "{{ burpsuite_installer_dir }}/{{ burpsuite_installer_script }}"
        mode: "0440"
      when:
        - burpsuite_community_download_enabled
        - burpsuite_product_type == 'community'

    - name: Get file checksum
      stat:
        path: "{{ burpsuite_installer_dir }}/{{ burpsuite_installer_script }}"
        checksum: sha256
      register: installer_script

    - name: Assert that checksum is correct
      assert:
        that:
          - burpsuite_installer_checksum == installer_script.stat.checksum
        fail_msg: "Burp Suite installer checksum is invalid"
        success_msg: "Burp Suite installer checksum is valid"

    - name: Create response.varfile for unattended install
      template:
        src: burpsuite_response.varfile.j2
        dest: "{{ burpsuite_installer_dir }}/burpsuite_response.varfile"

    - name: Install Burp Suite
      command: "/bin/sh {{ burpsuite_installer_script }} -q -varfile burpsuite_response.varfile -overwrite"
      args:
        chdir: "{{ burpsuite_installer_dir }}"

    - name: Remove Burp Suite Community installer
      file:
        path: "{{ burpsuite_installer_dir }}/{{ burpsuite_installer_script }}"
        state: absent
      when:
        - burpsuite_community_download_enabled
        - burpsuite_product_type == 'community'

    - name: Remove response.varfile 
      file:
        path: "{{ burpsuite_installer_dir }}/burpsuite_response.varfile"
        state: absent
  when: installed_version is not defined or installed_version != burpsuite_version

- name: Create directory for Burp Suite extras
  file:
    path: "{{ burpsuite_extras_dir }}"
    state: directory
    mode: 0755

- name: Download JRuby for Burp Suite
  get_url:
    url: "{{ burpsuite_jruby_jar_url }}"
    dest: "{{ burpsuite_extras_dir }}/jruby-complete.jar"
    checksum: "sha1:{{ burpsuite_jruby_jar_checksum }}"

- name: Download Jython for Burp Suite
  get_url:
    url: "{{ burpsuite_jython_jar_url }}"
    dest: "{{ burpsuite_extras_dir }}/jython-standalone.jar"
    checksum: "sha1:{{ burpsuite_jython_jar_checksum }}"

- name: Copy license_burp.py script to extras directory
  copy:
    src: license_burp.py
    dest: "{{ burpsuite_extras_dir }}/license_burp.py"
    mode: 0644

- name: Copy download_ca_cert.py script to extras directory
  copy:
    src: download_ca_cert.py
    dest: "{{ burpsuite_extras_dir }}/download_ca_cert.py"
    mode: 0644

- name: Create example user config in extras directory
  template:
    src: UserConfig.json.j2
    dest: "{{ burpsuite_extras_dir }}/UserConfig.json"
    mode: 0644

- name: Find any pre-existing Burp Suite desktop files
  find:
    paths: /usr/share/applications
    patterns: "Burp\\sSuite\\s(Community\\sEdition|Professional).*\\.desktop"
    file_type: file
    use_regex: true
  register: burpsuite_desktop_files

- name: Map windows to the Burp Suite launcher
  lineinfile:
    path: "{{ item.path }}"
    regex: "^StartupWMClass="
    line: "StartupWMClass=com-install4j-runtime-launcher-UnixLauncher"
  loop: "{{ burpsuite_desktop_files.files }}"
